.. index::
   single: CLIツール

.. _cli:

==============================
CLIツール コマンドリファレンス
==============================

.. _cli_config:

CLIコンフィグレーション
========================

::

  # コンフィグレーションファイルテンプレートの生成
  nebula init-config

コンフィグレーションファイルは nebula_config.yaml というファイル名で
カレントディレクトリまたはホームディレクトリに配置します。
（両方にファイルが存在する場合は、カレントディレクトリが優先されます)

書式は YAML 形式で、以下のとおりです。

.. code-block:: yaml

    tenant: テナントID
    appId: アプリID
    masterKey: マスターキー
    systemKey: システムキー
    baseUri: ベースURI
    debugMode: release
    proxy:
      host: null
      port: 0

* テナントID/アプリID/マスターキーは、デベロッパーコンソール上から値を確認ください。
* システムキーは、システム管理者に問い合わせください。システム管理者はデベロッパーコンソールの「管理」⇒「システム設定」より確認できます。
* baseUri は API サーバのベースURI を指定します (例: \https://baas.example.com/api)
* debugMode は release のままで構いません (通信ログ・デバッグログを確認したい場合のみ "debug" を指定してください)
* proxy 設定は、API サーバ接続時に Proxy サーバが必要な場合のみ設定してください(サーバホスト名とポート番号を指定)。

.. attention::

  YAML では、各設定項目の ':' の後にスペースが必要ですので、注意してください。


自己署名証明書を使用する場合
----------------------------

サーバ側が自己署名証明書を使用している場合、以下の設定を追加することでサーバ証明書の検証をスキップすることができます。

.. code-block:: yaml

    allowSelfSignedCert: true

.. attention::

  本設定は、セキュリティリスクが高くなるため実運用時の利用は推奨できません。 正規の証明書を使用するようにしてください。

API操作
=======

::

  # API の登録
  nebula create-api <api-file>

  # API名一覧の取得
  nebula list-apis [--yaml]

  # API定義の取得
  nebula get-api [--yaml] [--out output-file] <apiname>

  # API定義の削除
  nebula delete-api <apiname>

コード操作
==========

::

  # コードの新規登録
  nebula create-code [--bucket bucket] [--file filename]

  # コードの更新
  nebula update-code [--bucket bucket] [--file filename]

  # コード一覧の取得(ファイル名一覧の取得)
  nebula list-code [--bucket bucket]

  # コードのダウンロード
  nebula get-code [--bucket bucket] --out [output-file] <filename>

  # コードの削除
  nebula delete-code [--bucket bucket] <filename>

ファンクション操作
===================

::

  # ファンクションの登録
  nebula create-function <function-file>

  # ファンクション一覧(ファンクションテーブル)のエクスポート
  nebula export-functions [--yaml] [--out output-file]

  # ファンクションテーブルインポート
  nebula import-functions <function-table-file>

  # ファンクション定義の取得
  nebula get-function [--yaml] [--out output-file] <function-name>

  # ファンクション定義の削除
  nebula delete-function <function-name>

.. attention::

   ファンクションテーブルをインポートする際、サーバに登録済みのファンクションは一旦全て削除されます。
   ファンクションテーブルに同名のファンクションが複数ある場合、最後に定義されたファンクションが有効になります。

ログ取得
========

::

  # Cloud Functionsログ取得
  nebula get-logic-log [--start start-date] [--end end-date] [--recent recent] [--limit limit] [--format format] [--level level] [--query query] [--funcname function-name]

  # システムログ取得
  nebula get-system-log [--start start-date] [--end end-date] [--recent recent] [--limit limit] [--format format] [--level level] [--query query] [--tenant tenant] [--app app-id]

各オプションの意味は以下のとおり。

* start: ログ開始日時 (JavaScript の Date() でパースできるフォーマット)
* end: ログ取得終了日時
* recent: 直近 n 分のログを取得
* level: ログレベル。ERROR, WARN, INFO, DEBUG をカンマ区切りで連結した文字列
* limit: ログ件数上限。デフォルトは 100。
* format: 出力フォーマット。simple または json。
* query: MongoDB クエリ
* funcname: ファンクション名
* tenant: テナントID
* app: アプリID
