========================
マイグレーションガイド
========================

本章では、API Gateway の以前のバージョンからの
API の変更点や移行方法について説明します。

ver 7.0.0 → 7.5.0 での変更点
=============================

BASIC認証対応に伴う API Gateway HTTP Proxy 機能の後方非互換性
------------------------------------------------------------------------

モバイルバックエンド基盤v7.5.0からBASIC認証が導入されました。
それに伴い、API Gateway HTTP Proxy 機能の一部が後方非互換になっています。

BASIC認証のためのAurhotizationヘッダを伴うHTTPリクエストについて、
従来はモバイルバックエンド基盤でのBASIC認証は実施されず、そのままHTTP Proxy先へと転送できました。
しかし、v7.5.0以降ではモバイルバックエンド基盤にてBASIC認証が実施されます。


ver 6.5.0 → 7.0.0 での変更点
=============================

テンプレート記法
-----------------

テンプレートに引き渡される Model に以下のキーを追加しました。

* request.tenantId   : テナントID
* request.tenantName : テナント名

詳細は :ref:`templating` を参照してください。

x-auth-appkey ベンダ拡張
------------------------

Swagger ベンダ拡張に、x-auth-appkey を追加しました。
アプリケーションキー認証を無効化することが可能になります。

ver 6.0.0 → 6.5.0 での変更点
=============================

デベロッパーコンソール: API 定義編集機能追加
--------------------------------------------

ブラウザを使用してデベロッパーコンソール上で直接 API 定義(Swagger定義)の
投入・編集・削除が行えるようになりました。

JSON Patch / JSON Merge Patch 対応
----------------------------------

HTTP リクエスト/レスポンスボディ内の JSON を JSON Patch (RFC 6902), JSON Merge Patch (RFC 7386) で
書き換えできるようになりました。

詳細は :ref:`body_transform` を参照してください。

RabbitMQ ボディ変換対応
-----------------------

RabbitMQ についても HTTP と同様ボディの変換が行えるようになりました。
詳細は :ref:`body_transform` を参照してください。

テンプレート記法
-----------------

テンプレートに引き渡される Model に以下のキーを追加しました。

* request.sessionToken : セッショントークンの値

詳細は :ref:`templating` を参照してください。

HTTP Proxy 時の URI 相対パス記法追加
-------------------------------------

HTTP Proxy の x-proxy に、relativePath 記法を追加しました。
詳細は :ref:`xproxy` を参照してください。

転送先サーバ URI を相対パスで指定できるようになっています。

HTTP Proxy 大容量データ転送時の効率改善
---------------------------------------

従来の実装では、API Gateway (HTTP Proxy) でデータを転送する際、データ(HTTP Body)を一旦メモリ上に
すべてロードしてから転送を実施するようになっていました(Store and Forward方式)。
このため、データが大容量の場合はメモリの消費量が多くなっていました。

本バージョンでは、データを無変換で転送する場合はメモリ上にデータをロードせず、
ストリームのまま転送するように改善しました。

.. attention::

  ボディ変換規則(template/jsonPatch/jsonMergeなど)を使用する場合は、従来どおり
  メモリ上にデータをすべてロードしてから変換する動作となりますので、注意してください。
