===========================
JSONオブジェクトストレージ
===========================

ここではJSONオブジェクトストレージの利用方法について説明します。

オブジェクトバケット
====================

オブジェクトバケットは `baas.ObjectBucket` クラスのインスタンスとして生成します。
コンストラクタには Service とバケット名を渡します。

オブジェクトのクエリ操作などにはバケットが必ず必要になります。

.. code-block:: python

    bucket = baas.ObjectBucket(service, "TodoTutorial1")

オブジェクトの追加
==================

オブジェクトを保存するには、オブジェクトバケットの `insert()` を呼び出します。

引数には保存したいオブジェクトを dict 形式で指定します。
返り値には登録後のオブジェクトデータが dict 形式で返却されます。

.. code-block:: python

    obj = {description: "Foo Bar"}
    saved_obj = bucket.insert(obj)

アクセス制御
============

オブジェクト単位でアクセス制御を行うことができます。
オブジェクトの ACL プロパティに設定を記述することで、アクセス権を指定できます。

.. code-block:: python

    obj = {
        description: "Foo Bar",
        ACL: {
            "owner": "オーナID",
            "r": ["ユーザID", "g:グループ名"],
            "w": ["ユーザID"],
            "u": [],
            "d": [],
            "admin": []
        }
    }

ACL の詳細については `デベロッパーマニュアル <../developer/index.html>`_ の「セキュリティ:ACL」の節をご覧ください。

オブジェクトの更新
==================

オブジェクトを更新するには、ObjectBucket の `update()` を呼び出します。

引数には更新したいオブジェクトの id と更新データを指定します。
その際、更新対象のオブジェクトにオブジェクトIDを指定する必要があります。

.. code-block:: python

    result = bucket.update("オブジェクトID", {"description": "Bar"})

オブジェクトの削除
==================

オブジェクトを削除するには、 ObjectBucket の `remove()` を呼び出します。

remove() の引数には、削除対象のオブジェクトIDを指定します。

.. code-block:: python

    bucket.remove("オブジェクトID")

`remove_with_query()` を使用すると、検索条件を指定して一括削除ができます。

.. code-block:: python

    bucket.remove_with_query({"score": {"$lt": 30}})
